[{"title":"Blog Introduction and My Story","author":"Alex Younger","date":"Wed Jun 23 2021 11:46:06 GMT-0400 (Eastern Daylight Time)","slug":"blog-introduction-and-my-story","id":"52QAV5d0yFhaAoiDpunDM","markdown":"# Preface\n\nAs an educator, one of the major aspects of my job is to regularly think about meta-learning, more specifically, the process by which higher levels of understanding are achieved. Each time I want to teach about a topic that requires my students to engage in higher-level thinking, I have to consider: \"How can I break this down into consumable \"chunks\" of more easy-to-understand ideas?\"\n\nSuch thinking has helped me to improve my teaching year after year as I tweak lesson plans to better serve the students in my class (as well as keep up with the ebbs and flows of modern youth culture).\n\nMy intention and hope is to bring these skills to the coding community, particularly [one I've grown quite fond of](https://www.theodinproject.com), so that others who are on this journey have another resource that just might lead to a few moments of enlightenment.  \n&nbsp;\n\n# My story\n\nI started learning Javascript in February of 2020. I have always been enamored with the idea of coding, but I didn't have the wherewithal to pursue my own education in it until I was 31 years old. It happened after having a heart-to-heart conversation with some students who were despairing at the idea of choosing a major in college.\n\nThere is a growing belief amongst the younger generation that when you are 18, you must choose a path that will be your specialized field for the rest of your life. Choose correctly, and your life will be full of bliss because your career will bring you unending joy every single day. Choose wrong, and you're bound for a life of misery, slogging through the work week performing tasks you hate just to make ends meet.\n\nIt was during my attempt to dispel this social construct that I confessed to my students that I'd always loved the idea of software engineering, and that just because I teach music at age 31 doesn't mean I'll never get to pursue that.  \n&nbsp;\n\n### **_And then my brain began to itch..._**\n\n&nbsp;  \nCould I actually do it, or was I just saying that to make my students, no, to make _myself_, feel better? I knew in my head that people switch careers all the time, and although I didn't intend to switch mine, I wondered if programming was something I always _thought_ I could do, or something I could _actually_ do. I decided I was going to find out for sure. And thus began my journey...  \n&nbsp;\n\n# My intro to coding\n\nJavascript is my first programming language, and other than being generally \"good with computers\" (I'm the guy my family members call when anything tech-related goes awry), I had virtually no preexisting knowledge-base to refer to. I couldn't tell you the difference between an array and an object, and I thought an argument was just what happened when you wanted Chinese and the wife wanted pizza. So as I learned more about data types, structures, object-oriented and functional-programming paradigms, etc, I had to build my own understanding from the ground up.\n\nI did have one advantage, however. At the time I started learning to code, I had been a public school teacher for 7 years. Of course, that kind of experience brings with it a certain understanding about the learning process and different tricks of the trade to learn things faster and more comprehensively. But I also found myself responding critically of some of the articles and lessons I was reading online. Several times I've had to remind myself that the people who are writing the bits I was reading were only trying to help, but I often found myself saying, \"a picture or diagram would make this so much easier to understand,\" or, \"in the first two sentences of this article I've encountered five words that have a technical meaning I am unaware of.\"\n\nSo down the rabbit hole I would continue, and while I don't feel like any of my time researching was necessarily wasted, sometimes I felt like my efforts to focus on learning one concept were extremely inefficient. It would often take hours just to figure out _how_ to read the very resources that were trying to teach me a concept that, by itself, was simpler than the terminology used to teach that very concept.\n&nbsp;\n\n### **So I'm going to try writing a blog.**\n\n&nbsp;  \nThis is my first attempt at a blog, or really writing anything with a semblance of consistency or permanence. I don't consider myself to be a great writer, but I'm hoping my ability to teach, explain, and provide differentiated examples will overcome that. My hope is to focus primarily on topics that ride the line between elementary, especially for those who have an intellectual predisposition toward computer science, and intermediate. I want to elaborate on ideas that I particularly struggled to understand as I began my journey, and hopefully my attempts to break them down into something more readily consumable will help others who are in the position I was in at the beginning of my journey.\n\n# Conclusion\n\n#### **It's probably poor taste to end an educational blog without _some_ take-home point, so...**\n\n## Keep moving forward\n\nEven despite my frustrations with not grasping several different concepts even weeks after my first attempt to learn them, **I can confidently say that some things just take time**. With enough of it, you too will eventually \"get it\" (whatever \"it\" is for you).\n\nSometimes the connections between what we currently know and what we are trying to learn are simply too thin to really comprehend the next idea we are trying to learn. But given enough time, those connections will inevitably strengthen, and when we come back to those lessons we tried to learn earlier, we will wonder how we were ever confused to begin with.\n\nIt's the practice of a thing that makes us better at it, even more so than any particular course, lesson, or even teacher. So when I say \"keep moving forward\" - I mean just that. Keep coding.  \n&nbsp;\n\n### More reading:\n\n- Learning to code? Give [The Odin Project](https://www.theodinproject.com) a try. In my opinion, it's the best resource out there, and it has a great community of supporters and maintainers. Completely free!\n","homeDirectory":"/home/alex/projects/portfolio/src/data/blogs/intro","lastEdited":"Wed Jun 23 2021 13:18:29 GMT-0400 (Eastern Daylight Time)","mainImageUrl":"blog-introduction-and-my-story.jpg"},{"title":"Building A House From The Inside Out","author":"Alex Younger","date":"Tue Mar 01 2022 08:08:48 GMT-0500 (Eastern Standard Time)","slug":"building-a-house-from-the-inside-out","id":"-rlXqZF6ubnva9mQgOkFK","markdown":"# Building A House From The Inside Out\n\n## Separating view from data using Connect Four\n\n### Context\n\nFor two years, I've been a community member of and contributor to [The Odin Project](https://www.theodinproject.com/), and in my time there I have grown from a help-seeker to primarily a help-provider. TOP's curriculum features many opportunities to build games, from simple ones like Rock Paper Scissors and Tic Tac Toe, to more complex ones such as to Chess and Battleship.\n\nAs a Javascript developer, much of my learning happened in the browser environment where access to markup and styling is conveniently close at hand. As wonderful as this is for the process of game creation, I have often witnessed the tendency for inexperienced learners to fall into the anti-pattern of interacting with the DOM too freely within their game logic.\n\nBefore we begin, I want to emphasize two things:\n\n1. Modern applications are built in various ways depending on scale, scope, requirements, technological restrictions, etc... This article is not intended to teach about application design, nor to provide a one-size-fits-all methodology to building any web app. Its intent is to teach good practices for separating state logic from the UI controls within the context of vanilla JS.\n\n2. This is not a code-along. I will be creating a game as an example of _how_ to implement this separation of concerns, but it is not expected for you to build it along with me. However, for further learning, I will include a few practice assignments to help apply the concepts learned here that you can do by forking the Replit.\n\n### Imagine the outside\n\nPretend for a moment that building a game application is something like building a house. Imagine your dream house, and what it looks like in its final form. You're probably imagining all the elements of a house that are supposed to be seen from the outside and enjoyed aesthetically: the outside of the house, painted to your liking, decorations, the front yard, a charming front door. As you move inside, each room looks like it came straight from HGTV. Brand new appliances, furniture, etc...\n\nBut what about the structural elements of the house? Of course we appreciate those things too, but we don't often think about them because their implementation is hidden from our view in the final product. However, behind each wall in our house we can trust there is a sturdy frame. Above the ceiling, and below the floors, we trust there are joists and beams designed to keep the house standing. Underneath the house, we put all our faith in the foundation, which is responsible for holding everything else in place. Behind each exterior element, there is an interior support structure. In the same way, **our application's user interface should be a visual representation of underlying application logic**. In other words, behind everything that makes our game _look_ and _feel_ nice, there should be solid, foundational code.\n\n### Build from the inside\n\nIt's easy to focus on the visual and interactable elements of a project, just like it's easy to imagine how a house will look from the outside when we dream of building one. But just like a builder would first consider the structural design and blueprints of a house before beginning to imagine walls, doors, and windows, let's attempt to think through how our application is going to function at its core before implementing details in the user interface.\n\nA builder would never construct a wall that had no frame to support it. It is not the responsibility of drywall or plaster to support the weight of a house, nor, by itself, provide a sturdy barrier between rooms. Similarly, our DOM elements and queries should not be responsible for storing or handling the implementation details of how our application works. That is not their responsibility, nor what they were designed to do. They shouldn't be concerned with storing details on the state of our game, nor handling the logic our game requires to function correctly. Instead, the DOM should be responsible for **_reading_ and _displaying_ the application state to the user** and **providing an easy-to-use gateway to interact with the methods it needs to**.\n\n<span id=\"restrictive\">For example, if I am making a game, my UI should have access to a method it needs to use in order to play a round. This method should be simple to call and as restrictive as possible (meaning, it should **not** need to provide a multitude of arguments to do something). Conversely, the DOM probably doesn't need access to a way of changing which player's turn it is. Instead, it should be able to _read_ whose turn it is as it changes after every round. This is an important distinction, and one I hope to further illustrate later.</span>\n\n### How about an example?\n\nOkay, sure! I am going to build a simple [Connect Four](https://en.wikipedia.org/wiki/Connect_Four) game. As you read, take some time to understand what the code is doing and try to draw your own conclusions for how to implement what you've learned into your future projects.\n\nMy hope is that this article can be useful for learners in many stages of their journey, so I will do my best to provide comments in the code to explain each chunk.\n\n### Foundation and Framing\n\nOne great strategy to help keep game logic separate from your UI is to challenge yourself to build the game so that it can be played, in full, in the console. By not needing to rely on a UI, you can be sure that your code has integrity and is not concerning itself with what the browser window is showing. Here is my console-version of Connect Four. Once again, take some time to digest the code and learn what each piece is doing:\n\n[Connect Four - Console Edition](https://replit.com/@40percentzinc/ConnectFourConsole#script.js)\n\nYou may notice that I did not implement win conditions. This logic, while important to the core game, was not important in getting the point of this article across. However, it will be part of the optional practice assignments later for you to implement if you choose.\n\n### Now that our house is framed...\n\nIt's worth noting at this point that the beauty of decoupled code is that changing the implementation of any of the sub-modules will not require us to rewrite our whole program. Say, for instance, we wanted to create a version where the rows filled from the top-down. All we'd need to change is the `Gameboard.dropToken()` method's details, and the rest of the game would still run as intended.\n\n### Let's put the walls on!\n\nIt's now time to add the \"view\" aspect of our game. Take a moment to understand that the only way the UI should need to interact with the core game code in order to play a round is through the `GameController.playRound()` method. Remember how I said [the method to play should be simple to call and as restrictive as possible](#restrictive)? This is what I meant. We've constructed our game to have a very limited interface, and in doing so, made it _very_ easy to interact with from the \"outside.\"\n\nFor the visual representation of the game, I'm going to create one more module called `ScreenController`. This module will leverage an `updateScreen` pattern. The purpose of this pattern is to take some data about our game, such as the state of the game board and which player's turn it is, and update the screen each time a player takes their turn.\n\nFor the purpose of simplicity, I am going to make my styles very basic and just have the board show each cell's value (instead of a token color). Also note that I will be removing all previous comments from the console version shown earlier so as to keep the script file shorter.\n\n[Here is the Replit of the game with an HTML/CSS skeleton](https://replit.com/@40percentzinc/ConnectFourWithDOMSkeleton).\n\nLet's take some time to digest our new controller in `script.js`:\n\n#### `ScreenController()`\n\nThe first thing we do here is pull our game module into the screen controller. We no longer need global access to the game object, since our players will be interacting with the game through the DOM, not the console. Next, we create some DOM references to our game board and player turn display. These will be used by our `updateScreen` and `clickHandlerBoard` methods.\n\n#### `updateScreen()`\n\nThis here is the meat and potatoes of our screen controller. Here is what this method does, in order:\n\n1. Clear the DOM of the current board display by simply setting the `.board` div's text content to an empty string.\n1. Get the most up-to-date `board` from the game controller.\n1. Get the most up-to-date active player from the game controller.\n1. Render the player's turn in the `.turn` div.\n1. Render each grid square on the DOM\n   - I make sure to give each cell a data-attribute of `column` and set that value to the index of the cell in its row, so that when we click them in the future, we already have access to what column that cell is in.\n   - The cells are _buttons_, not _divs_. Why? In most cases, _anything clickable should be a button or link_. This enables those with accessability issues to still be able to use our site easily be tabbing and selecting with the keyboard.\n\nThe purpose of this method is to refresh our screen whenever a change happens in our game. It will be called whenever the user interacts with the game, like to play a round.\n\n#### `clickHandlerBoard()`\n\nThe click handler, once it verifies that a valid cell was clicked, will get the column data-attribute value, pass that into our game controller's `playRound` method, then run `updateScreen` to refresh the DOM.\n\nAnd just like that, we have a functional, decoupled, and modularized Connect Four game!\n\n### Conclusion\n\nIt should be easy to recognize that once the console version of our game was created, implementing the user interface was incredibly simple. We limited the scope of the DOM's interaction with our game to just 3 methods, and as a result did not need to worry about querying nodes for their text content or anything messy like that. As a result, our code is significantly easier to read, easier to debug, and more performant than the spaghettified, DOM-coupled, alternative.\n\n### Further Learning\n\nIf you felt like you learned something from this article, I'd highly encourage you to fork both replits and finish the game:\n\n1. Create win conditions in the console version, and create a way to check if a win condition was met after each round.\n   - Don't forget to account for potential ties!\n1. Apply those changes to the DOM version\n1. Create an intro screen where players can input their names.\n1. Create a winner screen and a \"play again\" function.\n1. Style each cell better - instead of a number, try to render an white, red, or blue circle.depending on the state of the cell.\n1. Put some paint on that house! Style the rest of the project to your liking.\n","homeDirectory":"/home/alex/projects/portfolio/src/data/blogs/separating-view-and-data","lastEdited":"","mainImageUrl":"building-a-house-from-the-inside-out.jpg"}]